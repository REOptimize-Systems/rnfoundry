function [dydt, ang_vel, torque, power] = wturbineode(t, y, v, ...
    time_interp, R, density, pitch_angle, inertia, control)

% Calculates the acceleration and velocity of a wind or tidal turbine
%
% This function is intended for use with the Matlab/Octave ode integrators
% to perform a time series simulation of the turbine.

%
% Syntax
%
% dydt = wturbineode(t, y, v, time_interp, R, density, pitch_angle, ...
% inertia, control)
% This is defined in the script wturbinemodel which calls on this function.
%
% Input
%
%   t - the current time step.
%
%   y - the values of the integrated quantities at the previous time step,
%    these quantites are:
%
%       y(1): angular position
%       y(2): angular velocity
%
%	v - the wind speed.
%
%   time_interp - the timesteps of the input wind speeds.
%	
% 	R - the radius of the rotor in metres.
%	
% 	density - the density of the fluid the turbine operates in.
%	
% 	pitch angle - the pitch angle of the blade, input if the turbine is 
%       fixed pitch or if a pitch control function is given.
% 
%   inertia - the resistance to changing velocity of the rotor, calculated
%   in wturbinemodel
% 			
%   control - determines whether the turbine is fixed or variable pitch
%
% Output
%
%  dydt - the derivatives of the turbine quantities at the current time
%    step:
%
%       dydt(1): angular velocity
%       dydt(2): angular acceleration
%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%
% Description
%
% This function uses a range of inputs to calculate the shaft torque on a 
% wind turbine. This is the difference in the torque generated by the rotor
% and the torque generated by the generator. In additon the angular
% velocity is output and plotted aginst time. This shows the acceleration of
% the totor up to a 'steady state'.
%
% The inputs to the function are the time period to consider, the wind 
% speed, the time steps of the wind speed input,the radius of the rotor,
% the density of the fluid the turbine is operating in, the pitch angle 
% of the blades (if the turbine is fixed pitch or a pitch function is 
% input) and the inertia of the rotor (calculated in wturbinemodel).
%
% Firstly the wind speed and blade pitch inputs are interpolated. This
% involves using the input values at a given time step to calculate what
% the value is at a different time. This is necessary because the ode
% solver chooses optimal timesteps that will be different from those input.
%
% The next step is the calculation of lambda (the tip speed ratio). This 
% is the ratio of the speed of the blade tip and the wind speed. This is 
% calculated using lambda = (angular speed*rotor radius)/wind speed. 
% Included in the function which calculates this an if statement that 
% applies in the case of angular velocity of the rotor being equal to zero.
% This is because when the rotor is staionary an infinate torque is 
% developed on the rotor. To resolve this issue an approximation is used
% sets the angular velocity equal to a very small finite value.
%
% After this a function is used to detect whether or not the input is for 
% a fixed or variable speed turbine. In the event that it is fixed pitch 
% this function is bypassed. However if the turbine is variable pitch this
% function calculates the pitch angle. It does this by optimising the pitch
% angle to maximise the coefficient of performance. The numerical 
% expression used to calculate the coefficient of performance is given in 
% [Lei et al]. 
%
% The values of tip speed ratio and the pitch angle are then used to 
% calculate the coefficient of performance. This value is the proportion 
% of energy in the wind that is converted into energy by the rotor. This 
% is calcuated using the same expression that is used to find the pitch 
% angle and is given by [Lei].
%
% The three functions discussed above constitute a model of the rotor of 
% the turbine. The output from this is used as an input to the shaft model.
% This is a model of the interation of torques on the shaft of the wind 
% turbine. The shaft being the point of interation of the rotor and 
% generator torques. The net torque on the shaft as a result of this 
% interaction is the output of this model.
%
% The rotor torque is calculated using a well known equation given for 
% example in [Bekker]. It uses the density of the surounding fluid, the 
% rotor radius, the wind speed and the coefficient of performance to 
% calculate the output torque.
%
% A value for the generator torque of (lambda/lambda_optim)*rotor torque is
% used. Here lambda_optim is the optimal tip speed ratio that maximises the
% coefficient of performance. It is calculated using an empirical 
% relationship given in [Slootweg]. This function gives a samll value of 
% generator torque when the rotor is moving slowly (i.e. startup) which 
% causes the rotor to accelerate and a high value of generator torque when
% the rotor is moving faster than optimally causing a braking effect. The
% shaft torque is then simply the difference between the rotor 
% and generator torques.
%
% The input into the ode45 is the shaft torque/ inertia. This is equal to 
% the change in rotor speed as shown in [Neammanee]. The ode45 solve the 
% equations for each timestep and outputs the angular position and velocity
% of the rotor.
%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

% Set the differential of position from ode45 equal to angular velocity 
% of the rotor

ang_vel = abs(y(2));

% Calculate u, the wind speed at the timesteps used by the ode solver

u = interp1(time_interp,v,t);

% Call upon the function lambda_calc, this calculates the tip speed ratio

lambda = lambda_calc(R,u,ang_vel);

% Call upon the function pitch_calc, this calculates the blade pitch. Only
% called upon if B is an empty vector which only occurs when the turbine is 
% variable pitch

if isempty(pitch_angle)
    
    % Call upn the function pitch_calc, this calculates the pitch angle

    B = pitch_calc(lambda);
  
elseif isempty(control)
    
    B = pitch_angle;
    
else    
    
    % Calculate B, the pitch angle at the timesteps used by the ode solver
    
    B = interp1(time_interp,pitch_angle,t);
    
end

% Call upon the function cp_calc, this calculates the coefficent of 
% performance

cp = cp_calc(lambda, B);

% Call upon the function torque_calc, this calculates the rotor torque and
% assigns a value to the generator torque. It then calculates the 
% difference which  is the shaft torque.

shaft_torque = torque_calc(density, R, u, cp, lambda);

% Calculate power and rotor torque to be output by the function for
% plotting with wturbinemodel.

power = (0.5 * pi * density * R^2 * u^3 * cp);
torque = (0.5 * pi * density * R^3 * u^2 * cp / lambda);

% Set up the ode
dydt = [y(2); (shaft_torque)/inertia];

end

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

% Below are a series of local functions that are called upon above.
% They combine to calcuate the inputs to the ode.


% A function to calculate the tip speed ratio of the rotor blades.
% This includes an statement that sets angular velocity equal to 
% 0.0000001 this is to eliminate a division by infinity error that
% occurs at a later stage. The inputs are rotor radius, wind speed and
% angular velocity. The output is the tip speed ratio of the turbine.

function lambda = lambda_calc(R, u, ang_vel)

	if ang_vel == 0
		lambda = (0.0000001*R)/u;

	else
		
		lambda = abs((ang_vel*R)/u);

	end

end

% A function to detect the number of arguments to determine if there 
% is a defined pitch angle, if not pitch angle is calculated by 
% maximising cp. Input is tip speed ratio, th output is pitch angle.

function B = pitch_calc(lambda)

	B = fminbnd(@(B)(-(0.5176.*(116./(1./((1./(lambda + 0.08.*B)) - ...
        0.035./(B.^3+1)))) - ...
        0.4.*B - 5).*exp(-21./(1./((1./(lambda +0.08.*B)) - ...
        0.035./(B.^3+1)))) + 0.0068* lambda),0,90);
	
end

% A function to calculate Cp, the coefficient of performance. 
% The tip speed ratio and the pitch angle are input, coefficent
% of performance is output.

function cp = cp_calc(lambda, B)

	lambda_i = ( 1 / ( (1/(lambda+0.08*B)) - (0.035 / (B^3+1))));
	
	cp = abs(0.5176 * (116/lambda_i - 0.4 * B - 5) * exp(-21/lambda_i) ...
        + 0.0068 * lambda);
	
end

% A function to calculate the rotor torque, set the generator torque
% to a multiple of the rotor torque and then work out the difference
% between them. The inputs are density, rotor radius, wind speed, 
% coefficient of performance and tip speed ratio. The output is the
% shaft torque. 

function shaft_torque = torque_calc(density, R, u, cp, lambda)

% Compute rotor torque
	rotor_torque = abs(0.5 * pi * density * R^3 * u^2 * cp / lambda);
	
	%%
	
	lambda_optim = fminbnd(@(lambda)(-(0.73.*(151./(1./(((1./((lambda) ...
        - 0.02*0))-(0.003/(0^3 + 1))))) - ...
        0.58*0 - 0.002*0^2.14 - 13.2).* ...
        exp(-18.4./(1./(((1./((lambda) - 0.02*0))-(...
        0.003/(0^3 + 1)))))))),0,10);
	
	% Set a value of generator torque a constant value is used as an
	% initial simplification
	
	gen_torque = (lambda/lambda_optim)*rotor_torque;
		
	% Output the shaft torque
	shaft_torque = rotor_torque - gen_torque;
end


