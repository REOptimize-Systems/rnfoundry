function [mcstate, resultCell] = mcorecheckforresults(mcstate, settings, evalfcns, fcnparams, resultCell)
% checks for an collects results generated by slaves in a multicore process
%

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % work down the file list from bottom to top and collect results %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if settings.debugMode
        fprintf(1,'********** 2. Working from bottom to top (file nr %d)\n', mcstate.lastFileNrSlave);
    end
        
    while 1
        
        % in this while-loop, mcstate.lastFileNrSlave will be
        % decremented if results are found

        if mcstate.lastFileNrSlave < 1
            % all work is done
            if settings.debugMode
                disp('********************************');
                fprintf(1,'All work is done (mcstate.lastFileNrSlave = %d).\n', mcstate.lastFileNrSlave);
            end
            break;
        end

        paramfname = strrep(mcstate.parameterFileNameTemplate, 'XX', sprintf('%04d', mcstate.lastFileNrSlave));
        resultfname = strrep(paramfname, 'parameters', 'result' );
        workfname = strrep(paramfname, 'parameters', 'working');
        mcstate.parIndex = ((mcstate.lastFileNrSlave-1)*settings.nrOfEvalsAtOnce+1) : min(mcstate.lastFileNrSlave*settings.nrOfEvalsAtOnce, mcstate.nrOfEvals);

        if mcstate.multicoreCancelled, return; end

        if settings.debugMode, t1 = mbtime(); end

        % set semaphore (only for the parameter file to reduce
        % overhead)
        sem = setfilesemaphore(paramfname, settings.showWarnings, settings.debugMode, 0, mcstate.dirTimeDiff);

        if settings.debugMode, mcstate.setTime = mcstate.setTime + mbtime() - t1; end

        % Check if the result is available (the semaphore file of the
        % parameter file is used for the following file accesses of the
        % result file)
        if existfile(resultfname)
            % if the result file exists, try to load the result from the
            % file
            [result, resultLoaded] = loadResultFile2(resultfname, settings.showWarnings);

            if resultLoaded && isempty(result) && ~settings.expectEmptyResults
                % if the result was unexpectedly empty we must resubmit
                % the parameter file
                resultLoaded = false;

                if settings.debugMode
                    fprintf(1,'Result file nr %d contained unexpected empty result.\nParameter file will be resubmitted.\n', mcstate.lastFileNrSlave)
                end
            end

            if resultLoaded && settings.debugMode
                fprintf(1,'Result file nr %d loaded.\n', mcstate.lastFileNrSlave);
            end

        else
            resultLoaded = false;

            if settings.debugMode
                fprintf(1,'Result file nr %d was not found.\n', mcstate.lastFileNrSlave);
            end
        end

        if resultLoaded

            % Result was successfully loaded. Remove semaphore.
            if settings.debugMode, t1 = mbtime(); end

            removefilesemaphore2(sem);

            if settings.debugMode, mcstate.removeTime = mcstate.removeTime + mbtime() - t1; end

            % Copy result to results cell array
            resultCell(mcstate.parIndex) = result;
            mcstate.nrOfFilesSlaves = mcstate.nrOfFilesSlaves + 1;

            % Run postprocessing function
            if ~isempty(settings.postProcessHandle)
                % run the multicore monitor function before beginning
                % evaluation of the post-processing function if it has been
                % supplied
                if ~isempty(settings.monitorFunction)
                    mcstate.monitorstate = feval(settings.monitorFunction, settings.monitorUserData, mcstate.monitorstate);
                end
                % then set up the post-processsing functio and evaluate it 
                postProcStruct.state               = 'after loading result';  % no copy & paste here!!
                postProcStruct.lastFileNrReady     = mcstate.lastFileNrSlave; % no copy & paste here!!
                postProcStruct.lastFileNrMaster    = mcstate.lastFileNrMaster;
                postProcStruct.lastFileNrSlave     = mcstate.lastFileNrSlave;
                postProcStruct.nrOfFilesMaster     = nrOfFilesMaster;
                postProcStruct.nrOfFilesSlaves     = mcstate.nrOfFilesSlaves;
                postProcStruct.resultCell          = resultCell;
                postProcStruct.parIndex            = mcstate.parIndex;
                feval(settings.postProcessHandle, postProcStruct);
            end

            % Reset variables
            mcstate.parameterFileFoundTime = NaN;
            mcstate.curPauseTime = settings.initCheckPauseTime;
            mcstate.parameterFileRegCounter = 0;

            % Decrement mcstate.lastFileNrSlave
            mcstate.lastFileNrSlave = mcstate.lastFileNrSlave - 1;

            % Check if all work is done
            if (mcstate.lastFileNrMaster - 1) + 1 == (mcstate.lastFileNrSlave + 1)
                % all results have been collected
                break
            else
                if settings.debugMode
                    fprintf(1,'***** Moving to next file (%d -> %d).\n', mcstate.lastFileNrSlave+1, mcstate.lastFileNrSlave);
                end
                % move to next file
                continue;
            end

        else % if resultLoaded
            % Result was not available.

            % Check if parameter file is existing.
            parameterFileExisting = existfile(paramfname);

            if parameterFileExisting
                % Check if job timed out.
                if settings.debugMode
                    fprintf(1,'Parameter file nr %d was existing.\n', mcstate.lastFileNrSlave);
                end
                % If the parameter file is existing, no other process has started
                % working on that job yet, which is most of the times normal.
                if ~isnan(mcstate.parameterFileFoundTime)
                    % If mcstate.parameterFileFoundTime is not NaN, the
                    % same parameter file has been found before. Now check
                    % if the job has timed out, i.e. no slave process seems
                    % to be alive.
                    jobTimedOut = mbtime() - mcstate.parameterFileFoundTime > mcstate.maxMasterWaitTime;
                else
                    % Remember the current time to decide later if the job has timed out.
                    mcstate.parameterFileFoundTime = mbtime();
                    jobTimedOut = false;
                end
            else
                if settings.debugMode
                    fprintf(1,'Parameter file nr %d was NOT existing.\n', mcstate.lastFileNrSlave);
                end

                % Parameter file has been taken by a slave, who should be working
                % on the job.
                if existfile(workfname)
                    if settings.debugMode
                        fprintf(1,'Master found working file nr %d.\n', mcstate.lastFileNrSlave);
                    end
                    % Check if the job has timed out using the time stamp of the
                    % working file.
                    jobTimedOut = mbtime() - getfiledate(workfname) * 86400 > mcstate.maxMasterWaitTime;
                else
                    % Parameter file has been taken but no working file has been
                    % generated, which is not normal. The master will generate the
                    % parameter file again or do the job.
                    if settings.showWarnings
                        fprintf(1,'Warning: Working file %s not found.\n', workfname);
                    end
                    jobTimedOut = true;
                end
            end % if parameterFileExisting

            % Do the job or generate parameter file again if job has timed out.
            if jobTimedOut
                if settings.debugMode
                    fprintf(1,'Job nr %d has timed out.\n', mcstate.lastFileNrSlave);
                end

                if parameterFileExisting
                    % The job timed out and the parameter file was
                    % existing, so something seems to be wrong. A
                    % possible reason is that no slaves are alive
                    % anymore. The master will do the job if it is a
                    % worker.

                    % Remove parameter file so that no other slave process can load it.
                    mbdelete2(paramfname, settings.showWarnings);
                    if settings.debugMode
                        fprintf(1,'Parameter file nr %d deleted by master.\n', mcstate.lastFileNrSlave);
                    end
                else
                    % The job timed out and the parameter file was not existing.
                    % A possible reason is that a slave process was killed while
                    % working on the current job (if a slave is still working on
                    % the job and is just too slow, the parameter maxEvalTimeSingle
                    % should be chosen higher). The parameter file is generated
                    % again, hoping that another slave will finish the job. If all
                    % slaves are dead, the master will later do the job.
                    mcstate = mcoreresubmitparams(mcstate, settings, ...
                                                  evalfcns, fcnparams, paramfname);

                end

                % Remove semaphore.
                if settings.debugMode, t1 = mbtime(); end

                removefilesemaphore2(sem);

                if settings.debugMode, mcstate.removeTime = mcstate.removeTime + mbtime() - t1; end

                if mcstate.multicoreCancelled, return; end

                if (parameterFileExisting  || mcstate.parameterFileRegCounter > 2) && settings.masterIsWorker
                    % The current job has timed out and the parameter file was not
                    % generated again OR the same parameter file has been
                    % re-generated several times ==> The master will do the job if it
                    % is a worker.
                    [mcstate, resultCell] = ...
                        mcoremastereval(mcstate, settings, evalfcns, fcnparams, resultCell);

                    % Result has been computed, move to next file
                    mcstate.lastFileNrSlave = mcstate.lastFileNrSlave - 1;

                    % Reset number of times the current parameter file was generated
                    % again
                    mcstate.parameterFileRegCounter = 0;

                    if settings.debugMode
                        fprintf(1,'Moving to next file (%d -> %d).\n', mcstate.lastFileNrSlave, mcstate.lastFileNrSlave-1);
                    end

                else
                    % The parameter file has been generated again. The master does
                    % not do the job, mcstate.lastFileNrSlave is not decremented.
                    if settings.debugMode && ~settings.masterIsWorker
                        fprintf(1,'Parameter file exists, but master is not worker,\ncheck slaves are still active, parameter file has been regenerated %d times.\n', mcstate.parameterFileRegCounter)
                    end
                end % if ~parameterFileExisting

                % reset variables
                mcstate.parameterFileFoundTime = NaN;
                mcstate.curPauseTime = settings.initCheckPauseTime;
            else

                if settings.debugMode
                    fprintf(1,'Job nr %d has NOT timed out.\n', mcstate.lastFileNrSlave);
                    t1 = mbtime();
                end

                removefilesemaphore2(sem);

                if settings.debugMode, mcstate.removeTime = mcstate.removeTime + mbtime() - t1; end

                if ~settings.masterIsWorker
                    % If the master is only coordinator, wait some time before
                    % checking again
                    if settings.debugMode, fprintf(1,'Coordinator is waiting %.2f seconds\n', mcstate.curPauseTime); end
                    
                    pause(mcstate.curPauseTime);
                    mcstate.curPauseTime = min(settings.maxCheckPauseTime, mcstate.curPauseTime + settings.initCheckPauseTime);

                    % run the multicore monitor function before beginning
                    % evaluation if it has been supplied
                    if ~isempty(settings.monitorFunction)
                        mcstate.monitorstate = feval(settings.monitorFunction, settings.monitorUserData, mcstate.monitorstate);
                    end
                    
                end
            end % if jobTimedOut

            if settings.masterIsWorker
                % If the master is also a worker, leave the while-loop if the
                % result has not been loaded. Either the job timed out and was done
                % by the master or the job has not been finished yet but is also
                % not timed out, which is normal.
                break;
            else
                % If the master is only coordinator, stay in the while-loop.
            end

        end % if resultLoaded
    end % while 1

end