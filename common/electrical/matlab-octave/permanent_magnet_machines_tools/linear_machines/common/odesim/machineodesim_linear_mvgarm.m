function [dpsidxR, EMF, FA, ForceVec, xE, vE, design] = machineodesim_linear_mvgarm(design, simoptions, Icoils, xA, vA, xBh, vBh, xBs, vBs)
% machineodesim_linear: determines the EMF, rate of change in flux
% linkage with relative armature/translator position, Shear Force and the
% velocities of each part of the machine

    %**********************************************************************
    % Determines the forces acting within the machine, and other important
    % machine outputs

    % next we determine the relative position of the armature and field in
    % order to determine forces and flux linkage

    % first determine xT from the new tether length, change in translator
    % vertical position will be change in distance from hawser to buoy, i.e
    % the change in tether length
    xE = (sqrt((xBh + simoptions.tether_length).^2 + xBs.^2) - simoptions.tether_length);
    
%     % Then calculate xR, the relative position
%     xR = (xT./ design.PoleWidth) - (xA./ design.PoleWidth);
%     
%     % Get the positions of the coils in a multi-phase block based on the
%     % translator position
%     pos = (((1:design.Phases) .* (2/design.Phases)) - 1 - (1/design.Phases) + xR)';
%     
%     % Find dpsidxR from a polynomial fitted to data generated by derivest
%     % function
%     %dpsidxR = polypsidot_ACTM(design, pos);
%     dpsidxR = slmpsidot_linear(design, pos, design.PoleWidth);
    
    % Find unit vector in the direction pointing from hawse hole to the buoy
    unitv = [simoptions.tether_length+xBh, xBs] / norm([simoptions.tether_length+xBh, xBs]);

    % Then find dot product of heave and surge velocities with unit vector
    % to get correct direction and magnitude of translator velocity
    vE = dot(unitv, [vBh, vBs]);

%     % Determine the coil velocity relative to the magnetic field for the
%     % EMF calculation
%     vRC = vA - vT;
% 
%     % determine the emf (voltage) in the coils, - vR * dpsi / dx because of
%     % the way we sample the flux linkage the value of dpsidx is the rate of
%     % change in flux linkage with positive movement of the translator
%     EMF = vRC .* -dpsidxR;
%     
%     % determine the forces due to the magnets and electrical forces at
%     % the relative position xR absed on the coil current and rate of change
%     % of flux linkage w.r.t. xR at this point.
%     Force = sum(Icoils .* dpsidxR) .* design.PowerPoles .* simoptions.NoOfMachines;

    % Get the EMF and forces using the core machine simulation function
    [FF, FA, EMF, dpsidxR, design] = coremachinesim_linear(design, simoptions, xE, xA, vE, vA, Icoils);

    %  Calculating the proportion that the machine forces are producing on
    %  surge and in heave. Do this by multiplying unit vector in direction
    %  of hawser to buoy by total forces. This results in new vector:
    %
    %               FfeaVec = [Ffea_heave, Ffea_surge]
    %
    %  Which should also have forces in the right directions.
    ForceVec = FF * unitv;
    
%     %  Calculating the proportion that the machine forces are producing on
%     %  surge and in heave. Do this by multiplying unit vector in direction
%     %  of hawser to buoy by total forces. This results in new vector:
%     %
%     %               FfeaVec = [Ffea_heave, Ffea_surge]
%     %
%     %  Which should also have forces in the right directions. The FEA
%     %  forces are calculated for the coils, therefore when the translator
%     %  is moving up, Ffea is also acting upwards. We must reverse their
%     %  direction to get the forces acting on the translator (and buoy).
%     ForceVec = -Force * unitv;
    
end
